syntax = "proto3";
package sourcing.v1;

import "sourcing/v1/farm_common.proto";
import "sourcing/v1/agent.proto";
import "google/protobuf/timestamp.proto";
import "sourcing/v1/produce.proto";
import "sourcing/v1/farmer.proto";
import "sourcing/v1/produce_collection.proto";
import "sourcing/v1/target.proto";
import "sourcing/v1/region.proto";
import "common/query/v1/query.proto";

message RegisterSourcingRequest{
  string id_number = 1;
  string phone_number = 2;
  string first_name = 3;
  google.protobuf.Timestamp date_of_birth = 4;
  Gender gender = 5;
  Country country = 6;
  RegionRequest region = 7;
  Type type = 8;
  Location store_location = 9;
  string last_name = 10;
}

message SourcingResponse{
  string code = 1;
  string message = 2;
  Agent agent = 3;
}

message SourcingRequest{
  string id = 1;
  string name = 2;
}
message SourcingAgentsRequest{
  string region = 1;
  Type type = 2;
}
message SourcingAgentsResponse{
  string code = 1;
  string message = 2;
  repeated Agent agents = 3;
}

message RegisterFarmerRequest{
  string id_number = 1;
  string phone_number = 2;
  string first_name = 3;
  google.protobuf.Timestamp date_of_birth = 4;
  Gender gender = 5;
  string last_name = 6;
  SourcingRequest agent = 7;
}
message FarmerResponse{
  string code = 1;
  string message = 2;
  Farmer farmer = 3;
}

message FarmerListResponse{
  string code = 1;
  string message = 2;
  repeated Farmer farmers = 3;
}

message ProduceCollectionRequest{
  string id = 1;
  string name = 2;
  SourcingRequest agent = 3;
  Farmer farmer = 4;
  ProduceType produce = 5;
  double quantity = 6;
  double unit_price = 7;
  string description = 8;
  ProduceCollectionDetails produce_collection_details = 9;
  double total_amount = 10;
  string target_id = 11;
  string purchase_order_id = 12;
}

message CollectionResponse{
  string code = 1;
  string message = 2;
  ProduceCollection produce_collection = 3;
}
message CollectionListResponse{
  string code = 1;
  string message = 2;
  repeated ProduceCollection produce_collection = 3;
}
message FTLTargetResponse{
  string code = 1;
  string message = 2;
  FTLTarget ftl_target = 3;
}
message FTLTargetList{
  string code = 1;
  string message = 2;
  repeated FTLTarget ftl_targets = 3;
}
message AgentTarget{
  string code = 1;
  string message = 2;
  Target agent_target = 3;
}

message AgentTargetList{
  string code = 1;
  string message = 2;
  repeated Target agent_targets = 3;
}

message BulkAgentTargetRequest{
  string request_id = 1;
  SourcingRequest field_team_lead = 2;
  repeated AgentTargetRequest agent_target_requests = 3;
}

message AgentTargetRequest{
  string request_id = 1;
  string target_id = 2;
  SourcingRequest agent = 4;
  SourcingRequest field_team_lead = 5;
  double target_amount = 6;
  ProduceAccount product = 7;
  double target_weight = 11;
  TargetType type = 14;
  string purchase_order_id = 15;
}

message FTLTargetRequest{
  string request_id = 1;
  string target_id = 2;
  SourcingRequest field_team_lead = 5;
  double target_amount = 6;
  ProduceAccount product = 7;
  double target_weight = 11;
  TargetType type = 14;
  PurchaseOrder purchase_order_id = 15;
  Customer customer = 16;
  RegionItem region_item = 18;
}
message RegionsResponse{
  repeated Region region = 2;
}

message StoreLocationsResponse{
  Region region = 1;
  repeated Location store_location = 2;
}
message ProduceCategoriesResponse{
  repeated ProduceType produce_category = 2;
}

service SourcingService{
  //  agent management
  rpc RegisterSourcingAgent(RegisterSourcingRequest) returns (SourcingResponse);
  rpc GetSourcingAgentStatus(common.query.v1.QueryRequest) returns (SourcingResponse);
  rpc DisableSourcingAgent(SourcingRequest) returns (SourcingResponse);
  rpc EnableSourcingAgent(SourcingRequest) returns (SourcingResponse);
  rpc GetSourcingAgents(common.query.v1.QueryRequest) returns (SourcingAgentsResponse);

  // farmer and produce management
  rpc RegisterFarmer(RegisterFarmerRequest) returns (FarmerResponse);
  rpc GetFarmerStatus(common.query.v1.QueryRequest) returns (FarmerResponse);
  rpc GetFarmers(common.query.v1.QueryRequest) returns (FarmerListResponse);

  // produce collection management
  rpc GetProduceCollection(common.query.v1.QueryRequest) returns (CollectionListResponse);
  rpc GetProduceCollectionStatus(common.query.v1.QueryRequest) returns (CollectionResponse);
  rpc CollectionProduce(ProduceCollectionRequest) returns (CollectionResponse);

  //  Agent target management
  rpc GetAgentTarget(common.query.v1.QueryRequest) returns (AgentTarget);
  rpc SetAgentTarget(BulkAgentTargetRequest) returns (AgentTargetList);
  rpc GetAgentTargets(common.query.v1.QueryRequest) returns (AgentTargetList);

  //  FTL target management
  rpc GetFTLTarget(common.query.v1.QueryRequest) returns (FTLTargetResponse);
  rpc SetFTLTarget(FTLTargetRequest) returns (FTLTargetResponse);
  rpc GetFTLTargets(common.query.v1.QueryRequest) returns (FTLTargetList);

  // configurations from erp
  rpc GetRegions(common.query.v1.QueryRequest) returns (RegionsResponse);
  rpc GetProduceCategories(common.query.v1.QueryRequest) returns (ProduceCategoriesResponse);
}