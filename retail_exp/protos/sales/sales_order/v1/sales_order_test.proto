syntax = "proto3";

package sales.sales_order.v1;

import "sales/sales_order/v1/sales_order.proto";

message SalesOrderTestRequest {
  //No. of sale orders to generate. Default = 1
  int32 number_of_sales_orders = 1;
  //Territory to which the sale order will belong. Default = random territory
  string territory_id = 2;
  //Where the sale order has been created from. i.e. either 'Duka App' or 'Agent PWA'
  //Default = 'Agent PWA'
  string created_on_app = 3;
  //Id of market developer or retailer who created the sale order
  //Default = a random creator
  //NB: If left out, then we assume your test case does not need a valid creator (agent or retailer)
  string created_by = 4;
  //The outlet/shop that created the sale order. Default = a random outlet id
  //NB: If left out, then we assume your test case does not need a valid creator (agent or retailer)
  string outlet_id = 5;
  //The items to be included in the sale order. Default = 1 random item
  //NB: If not specified, then assume the test case does not need pre-existing items
  // If delivery window is not specified, return a random delivery window id
  // and assume the test case does not need a valid delivery window
  repeated OrderCatalogItem items = 6;
  //Desired status of sale order. Default = SUBMITTED
  OrderStatus order_status = 7;
}

message SalesOrderTestResponse{
  repeated SalesOrder sale_orders = 1;
}

service SalesOrderTestService{
  rpc GetTestSalesOrders (SalesOrderTestRequest) returns (SalesOrderTestResponse);
}
