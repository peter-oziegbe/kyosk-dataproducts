syntax = "proto3";

package sales.sales_order.v1;

import "google/protobuf/timestamp.proto";
import "common/shared/v1/dimension.proto";

enum OrderStatus {
  UNSET = 0;
  SUBMITTED = 1;
  USER_CANCELLED = 2;
  PUBLISHED = 3;
  PROCESSING = 4;
  DISPATCHED = 5;
  DELIVERED = 6;
  COMPLETED = 7;
  CANCELLED = 8;
  EXPIRED = 9;
  SOLD_ON_CREDIT = 10 [deprecated = true];
  RESCHEDULED = 11;
}
enum ItemFulfilmentStatus {
  ITEM_UNSET = 0;
  ITEM_PROCESSED = 1;
  ITEM_RESCHEDULED = 2;
  ITEM_CANCELLED = 3;
  ITEM_FULFILLED = 4;
  ITEM_SUBMITTED = 5;
}

// Represents an order item
message OrderCatalogItem {
  string catalog_item_id = 1;
  string product_bundle_id = 2;
  int32 catalog_item_qty = 3;
  double discount_amount = 4;
  // total before discount
  double total = 5;
  // Total after discount
  double net_total = 6;
  double selling_price = 7;

  // This is a reference to the CatalogStockItem in Catalog
  repeated InventoryItem inventory_items = 8;

  // Item Delivery status
  ItemFulfilmentStatus fulfilment_status = 9;
  string category_id = 10;
  string uom = 11;
  string currency = 12;
  string delivery_window_id = 13;
  string image_url = 14;
}


message InventoryItem {
  string stock_item_id = 1;
  int32 conversion_factor = 2;
  int32 inventory_item_qty = 3;
  common.shared.v1.Dimension dimension = 5;
}

message SalesOrder {
  string id = 1;
  string name = 2;
  // Sales order items
  repeated OrderCatalogItem items = 3;

  // Represents order workflow state
  OrderStatus order_status = 5;
  // Id of outlet making the sales order
  string outlet_id = 6;
  // Id of retailer making the sales order
  string retailer_id = 7;
  // Cart id from where sale order was created
  string cart_id = 8;
  // Territory id of sale order origin
  string territory_id = 9;
  // Sales order amount before discount
  double total_amount = 10;
  // Total discount applied to sales order
  double sales_order_discount = 11;
  // Sales order total after discount - Should total paid_total , rescheduled_total and cancelled_total
  double net_total_amount = 12;
  // Total paid amount for the sale order
  double paid_total = 13;
  // Total amount for rescheduled  items in the sale order
  double rescheduled_total = 14;
  // Total amount for cancelled  items in the sale order
  double cancelled_total = 15;
  // App sale order was created on
  string created_on_app = 16;
  // User who created sales order
  string created_by = 17;
  // Date sale order was created
  google.protobuf.Timestamp created_date = 18;
  // Date sales order was updated
  google.protobuf.Timestamp last_modified_date = 19;
  // Last modified by user
  string last_modified_by = 20;
  // Route id that sale order was created
  string route_id = 21;
  // Market developer name
  string market_developer_name = 22;
  // Market developer mail
  string market_developer_email = 23;
  // Indicates if order was placed on credit
  bool is_credit_sale = 24;
  // Indicates if order is pre-karuru
  bool is_pre_karuru = 25;
}

message SalesOrderCancellationReason {
  string id = 1;
  string description = 2;
}

message CreateSalesOrderRequest {
  string outlet_id = 1;
  string territory_id = 4;
  double sales_order_amount = 6;
  double sales_order_discount = 7;
  double sales_order_total = 8;
  string created_on_app = 9;
  string delivery_window_id = 10;
  repeated OrderCatalogItem items = 11;
  string cart_id = 12;
  bool is_credit_sale = 13;
  string country_code = 18;
}

message CreateSalesOrderResponse {
  SalesOrder sales_order = 1;
}

message FetchSalesOrdersRequest {
  string order_id = 1;
  string owner_msisdn = 2;
  string outlet_id = 3;
  string territory_id = 4;
  repeated string route_ids = 5;
  string start_date = 6;
  string end_date = 7;
  int32 page_number = 8;
  int32 page_size = 9;
}

message FetchSalesOrdersResponse {
  string message = 1;
  int32 response_code = 2;
  repeated SalesOrder orders = 3;
}

message CancelSalesOrderRequest {
  //Reason for order cancellation
  string reason_id = 1;
  // order id
  string order_id = 2;
}

message CancelSalesOrderResponse {
  OrderStatus status = 1;
}

message FetchSalesOrderCancellationReasonsRequest {}

message FetchSalesOrderCancellationReasonsResponse {
  repeated SalesOrderCancellationReason reasons = 1;
}

service SalesOrderService {
  rpc CreateSalesOrder(CreateSalesOrderRequest) returns (CreateSalesOrderResponse) {}
  rpc FetchSalesOrders(FetchSalesOrdersRequest) returns (FetchSalesOrdersResponse) {}
  rpc CancelSalesOrder(CancelSalesOrderRequest) returns (CancelSalesOrderResponse) {}
  rpc FetchSalesOrderCancellationReasons(FetchSalesOrderCancellationReasonsRequest) returns (FetchSalesOrderCancellationReasonsResponse) {}
}
