syntax = "proto3";

package sales.cart.v1;
import "google/protobuf/timestamp.proto";
import "utils/v1/headers.proto";



//Represents cart status
enum CartStatus{
  CHECKED_OUT = 0;
  PENDING = 1;
  EXPIRED = 2;
  DELIVERY_WINDOW = 3;
}

message CartItem{
  string catalog_item_id = 1;
  int32 catalog_item_qty = 2;
  double discount_amount = 3;
  double selling_price = 4;

}
//Represents a cart
message Cart {
  //Unique cart id
  string id = 1;
  //Items in the cart
  repeated CartItem cart_items = 3;
  //Outlet id
  string outlet_id = 4;
  // Cart total
  double total_selling_amount = 6;
  // Minimum cart total amount allowable for cart to be checked out
  double allowed_checkout_amount = 7;
  // Total Discount Amount
  double total_discount_amount = 8;
  //Cart territory
  string territory_id = 9;
  //Status of the cart
  CartStatus cart_status = 10;
  // Time cart was created
  google.protobuf.Timestamp created_at = 11;
  // Time cart was updated
  google.protobuf.Timestamp updated_at = 12;

}

//create cart request
message CartItemUpdateRequest{
  string cart_id = 1;
  string catalog_item_id = 2; // this refers to the product bundle
  string qty = 3;
  string outlet_id = 4;
  repeated utils.v1.Header headers = 5;

}

//Checkout cart
message CartCheckoutRequest{
  string  cart_id = 1;
  string outlet_id = 2;
  string delivery_window_id = 3;
  bool is_credit_sale = 4;
  string created_on_app =5;
  repeated utils.v1.Header headers = 6;
}

//Fetch cart
message FetchCartRequest{
  //cart Id
  string  cart_id = 1;
}

message FetchCartResponse {
  string message = 1;
  int32  response_code = 2;
  repeated Cart cart = 3;
}

//Delete Cart
message DeleteCartRequest{
  //Cart id
  string  cart_id = 1;
}

//Delete cart response
message DeleteCartResponse{
  int32 response_code = 1;
  string message = 2;
}

//create cart response
message CartResponse{
  Cart cart = 3;
}

//cart response
message CheckoutResponse{
  Cart cart =1;
}

service CartService{
  rpc UpdateItem(CartItemUpdateRequest) returns (CartResponse);
  rpc CheckoutCart(CartCheckoutRequest) returns (CheckoutResponse);
  rpc FetchCart(FetchCartRequest) returns (FetchCartResponse);
  rpc UpdateQuantity(CartItemUpdateRequest) returns(CartResponse);
  rpc DeleteItem(CartItemUpdateRequest) returns(CartResponse);
  rpc DeleteCart(DeleteCartRequest) returns (DeleteCartResponse);
}