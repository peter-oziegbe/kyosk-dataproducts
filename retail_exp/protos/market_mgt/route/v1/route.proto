syntax = "proto3";

package market_mgt.route.v1;
import "google/protobuf/timestamp.proto";
import "utils/v1/pagination.proto";
import "market.proto";
import "market_mgt.sale_district/v1/sale_district.proto";


// Represents a route
message Route{

  // Route unique id
  string route_id = 1;
  // Route assigned code
  string route_code = 2;
  // Route assigned name
  string route_name = 3;
  // Sales district id
  string sale_district_id = 4;
  // representing the  Market
  string market_id = 5;
  // Boundary assigned to route
  string boundary = 6;
  // Time this route was created
  google.protobuf.Timestamp created_at = 7;
  // Id of user that updated this route
  string updated_by = 8;
  // Time this route  was updated
  google.protobuf.Timestamp updated_at = 9;
  //Market Developer Details
  MarketDeveloper market_developer = 10;
}

//Market developer object
message MarketDeveloper {
  string name = 1;
  string login = 2;
  string msisdn = 3;
}
//Market Developer routes
message MarketDeveloperRoutes{
  MarketDeveloper market_developer = 1;
  repeated Route routes = 2;
}

//Payload to post a Route
message PostRouteRequest{
  // Route assigned name
  string route_name = 1;
  // Sales district id
  string sale_district_id = 2;
  // FK id representing the  Territory
  string market_id = 3;
  // Boundary assigned to route
  string boundary = 4;
  // Market developer
  MarketDeveloper market_developer = 5;
}

//Response from PostRouteRequest
message PostRouteResponse {
  int32 response_code = 1;
  string message = 2;
  Route data = 3;
}

//Payload to update a Route
message UpdateRouteRequest{
  // Route unique id
  string route_id = 1;
  // Route assigned code
  string route_code = 2;
  // Route assigned name
  string route_name = 3;
  // Sales district id
  string sale_district_id = 4;
  // FK id representing the  Territory
  string market_id = 5;
  // Boundary assigned to route
  string boundary = 6;
  // Market developer
  MarketDeveloper market_developer = 7;
}
//Response from UpdateRouteRequest
message UpdateRouteResponse {
  int32 response_code = 1;
  string message = 2;
  Route data = 3;
}
//Payload to fetch Route
message GetRouteRequest{
  string id = 1;
  string code = 2;
  string market_id = 3;
  string sale_district_id = 4;
  string market_code = 5;
  string sale_district_code = 6;
  // Page number
  int32 page = 7;
  // Page size
  int32 page_size  = 8;
}
//Response from GetRouteRequest
message GetRouteResponse {
  int32 response_code = 1;
  string message = 2;
  repeated Route data = 3;
  utils.v1.Pagination pagination = 4;
}

//Delete route request
message DeleteRouteRequest{
  //Route id
  string  id = 1;
  //Route code
  string code = 2;
}
//Delete route response
message DeleteRouteResponse{
  int32 response_code = 1;
  string message = 2;
}
//Delete route response
message GetMDRoutesRequest{
  // Page number
  int32 page = 1;
  // Page size
  int32 page_size  = 2;
}
//Delete route response
message GetMDRoutesResponse{
  int32 response_code = 1;
  string message = 2;
  repeated MarketDeveloperRoutes  md_routes = 3;
}

message ValidateCoordinateRequest{
  string agent_login = 1;
  int32 latitude = 2;
  int32 longitude = 3;
  bool  supervisor = 4;

}
message CoordinateValidationResponse {
  market.v1.Market market  = 1;
  sale_district.v1.SaleDistrict saleDistrict = 2;
  Route route = 3;
  MarketDeveloper market_developer = 4;
}
message ValidateCoordinateResponse {
  int32 response_code = 1;
  string message = 2;
  CoordinateValidationResponse data = 3;

}

service RouteService{
  rpc PostRoute(PostRouteRequest) returns (PostRouteResponse){};
  rpc GetRoute(GetRouteRequest) returns (GetRouteResponse){};
  rpc UpdateRoute(UpdateRouteRequest) returns (UpdateRouteResponse){};
  rpc DeleteRoute(DeleteRouteRequest) returns (DeleteRouteResponse) {}
  rpc GetMarketDeveloperRoutes(GetMDRoutesRequest) returns (GetMDRoutesResponse) {}
  rpc ValidateCoordinate(ValidateCoordinateRequest) returns (ValidateCoordinateResponse){}

}