syntax = "proto3";

package merchandising.catalog.v1;
import "utils/v1/filter.proto";
import "utils/v1/pagination.proto";

message CatalogStockItem{
  string stock_item_id = 1;  // Stock item which is the same as item_id in Projected item_id DP and ProductBundle DP StockItem
  string stock_uom = 3;  //  How we count the item in the main WH
  int32 conversion_factor = 6; // This is a multiplicand when going from catalog_item_qty to inventory_item_qty
  int32 catalog_item_qty = 8;//Computed within catalog service
  int32 inventory_item_qty = 9;//Consumed from projected qty
}

message CatalogItem {
  //All id are the ids as from parent DP
  //  unique id representing the catalog item
  string id = 1;
  //  built from catalog items
  string item_id = 2; //ITEM PRICE  FROM ERP
  string item_name = 3;
  //  Built from the catalog products
  string product_id = 4;//PRODUCT BUNDLE  FROM ERP
  string category_id = 5;//Category ID within Category created from ITEM GROUP FROM ERP
  string item_description = 6;
  string image_url = 7;

  //  Comes from item prices
  string price_id = 9;//ITEM PRICE  FROM ERP
  double selling_price = 10;
  string currency = 11;
  bool is_active = 12;

  string territory_id = 16;//MARKET FROM MMS
  string price_list = 17;//Reference for territory within item prices ERP NEXT DP
  //This can be used by sales service during validation
  repeated CatalogStockItem catalog_stock_items = 18;

}

// request to a catalog item
message CatalogItemRequest {
  utils.v1.Filter catalog_id = 1;
  utils.v1.Filter item_name = 2;
  utils.v1.Filter item_id = 3;
  utils.v1.Filter product_id = 4;
  utils.v1.Filter category_id = 5;//category in category
  utils.v1.Filter item_group_id = 6;//category in product bundle
  utils.v1.Filter territory_id = 7;
  //  used to limit the return list where there are more that 1 results
  int32 request_limit = 12;
  bool is_active = 15;


}

// Response to the CatalogItem Request
message CatalogItemResponse {
  int32 response_code = 1;
  string message = 2;
  //  Returns a limited list of default pagination otherwise use the get paginated request
  repeated CatalogItem data = 3;
}

//Request for a paginated list of catalog items
message GetPaginatedCatalogItemRequest{
  int32 page = 1;
  int32 size = 2;
  string sort_by = 3;
  //  The field value to be referenced for criteria specification
  repeated utils.v1.Filter filter = 4;

}
//Response for a paginated list of CatalogItem
message GetPaginatedCatalogItemResponse{
  int32 response_code = 1;
  string message = 2;
  repeated CatalogItem catalog_items = 3;
  utils.v1.Pagination pagination = 4;

}
// Service definition
service CatalogItemService {
  rpc GetCatalogItem(CatalogItemRequest) returns (CatalogItemResponse) {}
  rpc GetPaginatedCatalogItems(GetPaginatedCatalogItemRequest) returns (GetPaginatedCatalogItemResponse){}
}