syntax = "proto3";

package dispatch.delivery_windows.v2;

import "common/query/v1/query.proto";
import "google/type/timeofday.proto";
import "google/type/dayofweek.proto";
import "common/audit/v1/audit.proto";
import "dispatch/delivery_windows/v2/delivery_window_config.proto";
import "dispatch/delivery_windows/v2/delivery_window.proto";
import "google/protobuf/empty.proto";

message CreateDeliveryWindowConfigCommand {
  string zone_id = 1;
  google.type.TimeOfDay cut_off_time = 2;
  google.type.TimeOfDay dispatch_start_time = 3;
  google.type.TimeOfDay dispatch_end_time = 4;
  google.type.TimeOfDay delivery_window_start_time = 5;
  google.type.TimeOfDay delivery_window_end_time = 6;
  repeated google.type.DayOfWeek delivery_days = 7;
  common.audit.v1.Audit audit = 8;
}

message DeliveryWindowConfigEntityResponse {
  DeliveryWindowConfig delivery_window_config = 1;
}

message DeliveryWindowConfigQueryResponse {
  repeated DeliveryWindowConfig delivery_window_configs = 1;
}

message UpdateDeliveryWindowConfigCommand {
  string id = 1;
  google.type.TimeOfDay cut_off_time = 2;
  google.type.TimeOfDay dispatch_start_time = 3;
  google.type.TimeOfDay dispatch_end_time = 4;
  google.type.TimeOfDay delivery_window_start_time = 5;
  google.type.TimeOfDay delivery_window_end_time = 6;
  repeated google.type.DayOfWeek delivery_days = 7;
  common.audit.v1.Audit audit = 8;
}

message DeliveryWindowConfigEntityId {
  string id = 1;
}

message DeliveryWindowConfigResponse {
  string message = 2;
}


service DeliveryWindowConfigService {
  rpc CreateDeliveryWindowConfig (CreateDeliveryWindowConfigCommand) returns (DeliveryWindowConfigEntityResponse);
  rpc QueryDeliveryWindowConfig (common.query.v1.QueryRequest) returns (DeliveryWindowConfigQueryResponse);
  rpc UpdateDeliveryWindowConfig (UpdateDeliveryWindowConfigCommand) returns (DeliveryWindowConfigEntityResponse);
  rpc DeleteDeliveryWindowConfig (DeliveryWindowConfigEntityId) returns (DeliveryWindowConfigResponse);
}


message DeliveryWindowQueryResponse {
  repeated DeliveryWindow delivery_window = 1;
}

message DeliveryWindowEntityId {
  string id = 1;
}

message DeliveryWindowResponse {
  string message = 2;
}


service DeliveryWindowService {
  rpc QueryDeliveryWindow (common.query.v1.QueryRequest) returns (DeliveryWindowQueryResponse);
  // Sets `available` to false
  rpc DeactivateDeliveryWindow (DeliveryWindowEntityId) returns (DeliveryWindowResponse);
  // Sets `available` to true, but only if it was false and the cut-off time has not been reached
  rpc ReactivateDeliveryWindow (DeliveryWindowEntityId) returns (DeliveryWindowResponse);
  // Regenerates delivery windows for the specified zone and publishes them to Kafka.
  // If any windows were deactivated as a result of this call,
  // they will be published to Kafka with the `available` field set to false.
  // Newly generated windows will also be published.
  rpc RegenerateDeliveryWindowsByZone (DeliveryWindowEntityId) returns (DeliveryWindowResponse);
  // Regenerates delivery windows for the specified territory and publishes them to Kafka.
  // If any windows were deactivated as a result of this call,
  // they will be published to Kafka with the `available` field set to false.
  // Newly generated windows will also be published.
  rpc RegenerateDeliveryWindowsByTerritory (DeliveryWindowEntityId) returns (DeliveryWindowResponse);
  // Regenerates delivery windows for all zones in the system and publishes them to Kafka.
  // If any windows were deactivated as a result of this call,
  // they will be published to Kafka with the `available` field set to false.
  // Newly generated windows will also be published.
  // The delivery window cron job will also be refreshed to capture the time when it's running next
  rpc RegenerateDeliveryWindowsGlobally (google.protobuf.Empty) returns (DeliveryWindowResponse);
}
