syntax = "proto3";

package dispatch.delivery_trip.v1;

import "dispatch/delivery_trip/v1/delivery_trip.proto";
import "google/type/date.proto";
import "common/general/v1/async.proto";
import "common/query/v1/query.proto";


message DeliveryTripCreateCmd{
   //The driver code attached to the delivery trip
	string driver_id = 4;

    repeated string delivery_note_ids = 12;

    google.type.Date  scheduled_date = 20;

    // This should be fullfillment_center. however for now we can work with Territory ID @TODO change to FC
    string territory_id = 25;
}


message DeliveryTripAsyncUpdateCmd{
    string id = 1;
    
    string dt_id = 2;
    
    DTAction action = 3;
    
    DeliveryTripStatus to_status = 4;
    
    repeated string dns_to_remove = 5;
    
    repeated string dns_to_add = 6;

    common.general.v1.AsyncCmdStatus cmd_status = 7;
    
    common.general.v1.AsyncUserContext user_ctx = 15;
}


enum DTAction{
    DT_TRANSITION = 0;
    EDIT_NOTES = 1;
}

message DeliveryTripEntityId{
    string id = 1;
}

message DeliveryTripEntityResponse{
    DeliveryTrip delivery_trip = 1;
}

message DeliveryTripQueryResponse {
    repeated DeliveryTrip delivery_trips = 1;
}

message DeliveryTripCmdRequest {
    string id = 1;
}

service DeliveryTripService {
    rpc Create (DeliveryTripCreateCmd) returns (DeliveryTripEntityResponse);
    rpc Update (DeliveryTripAsyncUpdateCmd) returns (DeliveryTripAsyncUpdateCmd);
    rpc Fetch  (DeliveryTripEntityId) returns (DeliveryTripEntityResponse);
    rpc Query(common.query.v1.QueryRequest) returns(DeliveryTripQueryResponse);
    rpc DeliveryTripCmd (DeliveryTripCmdRequest) returns (DeliveryTripAsyncUpdateCmd);
}
