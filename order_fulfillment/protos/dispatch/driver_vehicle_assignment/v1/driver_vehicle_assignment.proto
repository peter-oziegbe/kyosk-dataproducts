syntax = "proto3";

package dispatch.driver_vehicle_assignment.v1;


import "google/protobuf/timestamp.proto";
//import "dispatch/vehicle/v1/vehicle.proto";
//import "dispatch/driver/v1/driver.proto";
//import "dispatch/service_provider/v1/service_provider.proto";

message DriverVehicleAssignment{
  string id = 1;
  //Refers to Code for Vehicle
  string vehicle_id = 2;
  //Refers to ID for Driver
  string driver_id = 3;
  //Refers to Code in Service Provider
  string vehicle_provider_id = 4;
  //Refers to Code in Service Provider
  string driver_provider_id= 5;

  google.protobuf.Timestamp date_assigned = 6;

  google.protobuf.Timestamp date_unassigned = 7;

  string territory_id = 8;
}

//message VehicleAssignTerritoryRequest{
//  string vehicle_code = 1;
//  string territory_id = 2;
//}
message AssignmentRequest{
  string vehicle_code = 1;
  string territory_code = 2;
  string driver_code = 3;
}


//message DriverAssignTerritoryRequest {
//    string driver_code = 1;
//    string territory_code = 2;
//}

//message DriverAssignServiceProviderRequest {
//    string driver_code = 1;
//    string service_provider_code = 2;
//}

message FilterDriverVehicleAssignmentRequest{
  string id =1;
  string vehicle_code =2;
  string driver_code = 3;
  string territory = 4;
  google.protobuf.Timestamp date_assigned = 5;
  google.protobuf.Timestamp date_unassigned = 6;
  string driver_provider_code = 7;
  string vehicle_crovider_code = 8;
  string driver_name = 9;
  string license_plate = 10;
  string driver_trip = 11;
  string driver_availability = 12;
  int32 page_size = 13;
  int32 page_number = 14;
}
message GetDriverVehicleAssignmentsResponse {
  int32 response_code = 1;
  string message = 2;
  repeated DriverVehicleAssignment data = 3;
}

message GetDriverVehicleAssignmentResponse {
  int32 response_code = 1;
  string message = 2;
  DriverVehicleAssignment data = 3;
}

message GetDriverVehicleAssignmentRequest {
  string id = 1;
}

//Service definition
service DriverVehicleAssignmentService {

  // Fetch assignments based on criteria
  rpc DriverVehicleAssignments(FilterDriverVehicleAssignmentRequest) returns (GetDriverVehicleAssignmentsResponse);
  //Fetch assignment By Id
  rpc GetDriverAssignment(GetDriverVehicleAssignmentRequest) returns (GetDriverVehicleAssignmentResponse) {}
  // Create a vehicle assignment and close previous
  rpc CreateVehicleAssignment(AssignmentRequest) returns (GetDriverVehicleAssignmentResponse){};
  // Create a DRIVER assignment and close previous
  rpc CreateDriverAssignment(AssignmentRequest) returns (GetDriverVehicleAssignmentResponse){};
  // Create a DRIVER assignment and close previous
  rpc CreateDriverAndVehicleAssignment(AssignmentRequest) returns (GetDriverVehicleAssignmentResponse){};
  //Close previous Driver-Vehicle assignment and create separate assignments
  rpc CloseAndVehicleAssignment(GetDriverVehicleAssignmentRequest) returns (GetDriverVehicleAssignmentsResponse);
  }