syntax = "proto3";
package protos.mpesa_service.v1;

import "google/protobuf/timestamp.proto";

//The matched status is used to define whether a transaction is used or not
enum Matched{
  //This means the Mpesa code is not used
  MATCHED_FALSE_UNSPECIFIED = 0;

  //This means the Mpesa code is used
  MATCHED_TRUE = 1;
}

//The transactionType represents the mode of payment used to conduct a transfer from Safaricom's side
enum TransactionType{
  //Customer merchant payment
  TRANSACTION_TYPE_CUSTOMER_MERCHANT_PAYMENT_UNSPECIFIED = 0;

  //Customer to business debit transaction
  TRANSACTION_TYPE_C2B_BUY_GOODS_DEBIT = 1;

  //Ordinary payment transfer
  TRANSACTION_TYPE_OD_PAYMENT_TRANSFER = 2;

  //Business to Business API method
  TRANSACTION_TYPE_MERCHANT_TO_MERCHANT_PAYMENT_VIA_API = 3;

  //Business to Business USSD method
  TRANSACTION_TYPE_MERCHANT_TO_MERCHANT_PAYMENT_VIA_USSD = 4;

  //Till to Till transfer
  TRANSACTION_TYPE_ORGANIZATION_TO_ORGANIZATION_TRANSFER = 5;
}

//The payment method to complete an Mpesa transaction
enum PaymentMethod{

  //The Till method
  PAYMENT_METHOD_TILL_UNSPECIFIED = 0;

  //Through initiating an STK
  PAYMENT_METHOD_STK = 1;
}

//Mpesa payment request (Mpesa service)
message MpesaPaymentRequest{

  //A unique identifier in our kyosk system
  string id = 1;

  //a unique ID generated by system when a request has been done
  string payment_request_id = 2;

  //Kyosk Customer ID
  string customer_id = 3;

  //This field indicates the Matched status (Used/Unused)
  Matched matched = 4;

  //The phone number used to make a payment
  int64 msisdn = 5;

  //Kyosk Till number
  int32 kyosk_till_number = 6;

  //The Mpesa code (transaction reference)
  string mpesa_code = 7;

  //The transaction amount
  int32 transaction_amount = 8;

  //Transaction time (Timestamp) received from Safaricom servers in this format '20220322185030'
  int64 transaction_time = 9;

  //Transaction date in Timestamp format from Kyosk servers
  google.protobuf.Timestamp created_date = 10;

  //Transaction Type
  TransactionType transaction_type = 11;

  //Payment Method
  PaymentMethod payment_method = 12;

}

// Create a new Mpesa payment request
message PostMpesaPaymentRequest {
  MpesaPaymentRequest payment_request = 1;
}

// Response to the CreatePaymentRequest
message PostMpesaPaymentResponse {
  int32 response_code = 1;
  string message = 2;
  MpesaPaymentRequest data = 3;
}

// Payload to fetch customer's payment requests
message GetCustomerPaymentRequest {
  string customer_id = 1;
}

// Response to the GetCustomerPaymentRequests
message GetCustomerPaymentResponse {
  int32 response_code = 1;
  string message = 2;
  repeated MpesaPaymentRequest data = 3;
}

// Service logic
service PaymentRequestService {
  rpc PostPayment(PostMpesaPaymentRequest) returns (PostMpesaPaymentResponse) {}
  rpc GetCustomerPayment(GetCustomerPaymentRequest) returns (GetCustomerPaymentResponse) {}
}