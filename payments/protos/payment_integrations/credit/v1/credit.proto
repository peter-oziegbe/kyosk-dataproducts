syntax = "proto3";
package payment_integrations.credit.v1;

import "google/protobuf/timestamp.proto";

//enum for credit status
enum CreditStatus{

  PENDING = 0;
  APPROVED = 1;
  DECLINED = 2;
  CREDIT_BLOCKED = 3;
  BLOCKED = 4;
}

//enums used for credit repayment status
enum RepaymentStatus{
  PENDING_UNSPECIFIED = 0;
  PARTIAL_PAID = 1;
  PAID = 2;
}

//This message will be used for credit limit upload (Upload a Multipart file)
message CreditLimitImportRequest {
  string name = 1;
  string type = 2;
  bytes contents = 3;
}

//This will be response for Credit limit upload request
message CreditLimitImportResponse {
  int32 response_code = 1;
  string message = 2;
}

//This is used for credit application
message CreditApplicationRequest{
  string duka_code = 1;
  string duka_name = 2;
  string phone_number = 3;

}

//This is used for credit application response
message CreditApplicationResponse{
  int32 response_code = 1;
  string message = 2;

}

//This is used for holding customer credit limit data
message CustomerCredit{
  string id = 1;
  string duka_code = 2;
  string duka_name = 3;
  string phone_number = 4;
  string alternative_phone_number = 5;
  int32 credit_limit = 6;
  CreditStatus credit_status = 7;
  string credit_status_description = 8;
  string financier = 9;
  //percentage value of the credit limit used
  int32 service_fee = 10;
  //number of days given for a credit to be repaid
  int32 credit_period = 11;
}

//used to fetch customers credit limit
message FetchCreditLimitRequest{
  string duka_code = 1;
}

//response after fetching customer credit limit
message FetchCreditLimitResponse{
  int32 response_code = 1;
  string message = 2;
  CustomerCredit data = 3;
}


//used to update the customers credit limit data from admin side
message UpdateCreditLimitRequest{
  string duka_code = 1;
  int32 credit_limit = 2;
  CreditStatus credit_status = 3;
  string credit_status_description = 4;
  int32 service_fee = 5;
  int32 credit_period = 6;
}

//response from updating the customers credit limit data from admin side
message UpdateCreditLimitResponse{
  int32 response_code = 1;
  string message = 2;
  CustomerCredit data = 3;
}

//request used when paying for the order using kyosk credit service
message PayWithCreditLimitRequest{
  string payment_request_id = 1;
  int32 credit_amount= 2;
  string customer_id = 3;
  string duka_code = 4;
}

//response given after receiving request for order payment with credit
message PayWithCreditLimitResponse{
  int32 response_code = 1;
  string message = 2;

}


message CreditAllocated{
  string id = 1;
  string payment_request_id = 2;
  string customer_id = 3;
  int32 credit_amount = 4;
  int32 service_fee = 5;
  int32 penalty_fee = 6;
  int32 credit_balance_amount = 7;
  RepaymentStatus repayment_status = 8;
  CustomerCredit customer_credit = 9;
  google.protobuf.Timestamp disbursement_date = 10;
  google.protobuf.Timestamp due_date = 11;
}

//request sent when fetching customer with credit balance pending repayment
message CreditPendingRepaymentRequest{
  string duka_code = 1;
}

//response sent after fetching customer with credit balance pending repayment
message CreditPendingRepaymentResponse{
  int32 response_code = 1;
  string message = 2;
  CreditAllocated data = 3;
}


// Service logic
service CreditService {
  //Process customer credit limit Upload request
  rpc CreditLimitImport(CreditLimitImportRequest) returns (CreditLimitImportResponse);
  //Process customer credit application request
  rpc CreditApplication(CreditApplicationRequest) returns (CreditApplicationResponse);
  //fetch customers credit limit
  rpc FetchCreditLimit(FetchCreditLimitRequest) returns (FetchCreditLimitResponse);
  //update customers credit limit
  rpc UpdateCreditLimit(UpdateCreditLimitRequest) returns (UpdateCreditLimitResponse);
  //pay for order using credit limit
  rpc PayWithCreditLimit(PayWithCreditLimitRequest) returns (PayWithCreditLimitResponse);
  //fetch credit which are pending repayment
  rpc FetchCreditPendingRepayment(CreditPendingRepaymentRequest) returns (CreditPendingRepaymentResponse);

}