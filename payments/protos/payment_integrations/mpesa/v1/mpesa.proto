syntax = "proto3";
package payment_integrations.mpesa.v1;

import "google/protobuf/timestamp.proto";

//The matched status is used to define whether a transaction is used or not
enum Matched{
  //This means the Mpesa code is not used
  FALSE_UNSPECIFIED = 0;

  //This means the Mpesa code is used
  TRUE = 1;
}

//The transactionType represents the mode of payment used to conduct a transfer from Safaricom's side
enum TransactionType{
  //Customer merchant payment
  CUSTOMER_MERCHANT_PAYMENT_UNSPECIFIED = 0;

  //Customer to business debit transaction
  C2B_BUY_GOODS_DEBIT = 1;

  //Ordinary payment transfer
  OD_PAYMENT_TRANSFER = 2;

  //Business to Business API method
  MERCHANT_TO_MERCHANT_PAYMENT_VIA_API = 3;

  //Business to Business USSD method
  TRANSACTION_TYPE_MERCHANT_TO_MERCHANT_PAYMENT_VIA_USSD = 4;

  //Till to Till transfer
  ORGANIZATION_TO_ORGANIZATION_TRANSFER = 5;
}

//The payment method to complete an Mpesa transaction
enum PaymentMethod{

  //The Till method
  TILL_UNSPECIFIED = 0;

  //Through initiating an STK
  STK = 1;
}

//This enum specifies the type of request
enum TypeOfRequest{

  //Invoking an STK push
  INVOKE_UNSPECIFIED = 0;

  //Validating an transaction
  VALIDATE = 1;

  //look up a transaction "fetch an mpesa code"
  LOOKUP = 2;

  //Fetch the validation status
  FETCH_VALIDATION = 3;

  //Match a transaction "deactivate an Mpesa code"
  MATCH_TRANSACTION = 4;

}

//This enum specifies the payment status
enum Status{

  //Failed status
  FAILED_UNSPECIFIED = 0;

  //Success status
  SUCCESSFUL = 1;
}

//Mpesa payment request (Mpesa service)
message MpesaRequest{

  //a unique ID generated by system when a request has been done
  string payment_request_id = 1;

  //Kyosk Customer ID
  string customer_id = 2;

  //This field indicates the Matched status (Used/Unused)
  Matched matched = 3;

  //The phone number used to make a payment
  int64 msisdn = 4;

  //Kyosk Till number
  int32 kyosk_till_number = 5;

  //The Mpesa code (transaction reference)
  string transaction_id = 6;

  //The transaction amount
  int32 transaction_amount = 7;

  //Transaction time (Timestamp) in SimpleDateFormat
  google.protobuf.Timestamp transaction_time = 8;

  //Transaction Type
  TransactionType transaction_type = 9;

  //Payment Method
  PaymentMethod payment_method = 10;

  //Type of transaction request
  TypeOfRequest type_of_request = 11;

  //Specific for Mpesa Payment channel i.e channel = "MPESA"
  string channel = 12;

  //specify the country ie country = "KE"
  string country = 13;

  //currency i.e currency = "KSH"
  string currency = 14;

  //The payment status i.e "SUCCESSFULL || FAILED"
  Status status = 15;

  //metadata such as merchant request id, checkout request id, etc
  string metadata = 16;

}

//This is additional information received from safaricom
message Metadata{

  string merchant_request_id = 1;

  string checkout_request_id = 2;
}

//The callback message, this will be sent to Kafka
message MpesaCallback{
  //Specific for Mpesa Payment channel i.e channel = "MPESA"
  string channel = 1;

  //specify the country ie country = "KE"
  string country = 2;

  //The transaction amount
  int32 transaction_amount = 3;

  //currency i.e currency = "KSH"
  string currency = 4;

  //The payment status i.e "SUCCESSFULL || FAILED"
  Status status = 5;

  //a unique ID generated by system when a request has been done
  string payment_request_id = 6;

  //The Mpesa code (transaction reference)
  string transaction_id = 7;

  //Transaction time (Timestamp) in SimpleDateFormat
  google.protobuf.Timestamp transaction_time = 8;

  //metadata such as merchant request id, checkout request id, etc
  Metadata metadata = 9;

}

//Mpesa Message for Invoking an STK push
message STKRequest {

  //a unique ID generated by system when a request has been done
  string payment_request_id = 1;

  //Kyosk Customer ID
  string customer_id = 2;

  //The phone number used to make a payment
  int64 msisdn = 3;

  //The transaction amount
  int32 amount = 4;

}

//This message will be used for Mpesa code upload (Upload a Multipart file)
message MpesaImportRequest {
  bytes file = 1;
}

//This message will serve as a response data
message TillTransactionData {
  string transaction_type = 1;
  string trans_id = 2;
  string trans_time = 3;
  string trans_amount = 4;
  string business_short_code = 5;
  string bill_ref_number = 6;
  string org_account_balance = 7;
  string third_party_trans_id = 8;
  string msisdn = 9;
  string first_name = 10;
  string middle_name = 11;
  string last_name = 12;
}

//This will be response for MpesaUpload request
message MpesaImportResponse {
  repeated TillTransactionData messages = 1;
}

// Create a new Mpesa payment request
message CreateMpesaRequest {
  MpesaRequest payment_request = 1;
}

// Response to the CreateMpesaRequest
message CreateMpesaResponse {
  int32 response_code = 1;
  string message = 2;
  MpesaRequest data = 3;
}

// Payload to fetch customer's Mpesa requests
message FetchCustomerPaymentRequest {
  string customer_id = 1;
}

// Response to the GetCustomerMpesaRequests
message FetchCustomerPaymentResponse {
  int32 response_code = 1;
  string message = 2;
  repeated MpesaRequest data = 3;
}

//Invoke STK push Request
message InvokeSTKRequest {
  STKRequest stk_request = 1;
}

//Invoke STK Push Response
message InvokeSTKResponse {
  int32 response_code = 1;
  string message = 2;
  STKRequest data = 3;
}

// Request to fetch an MPESA transaction from OUR DB
message FetchMpesaTransactionRequest {
  string transaction_id = 1;
  PaymentMethod transaction_type = 2;
}

// Response to fetch an MPESA transaction from OUR DB
message FetchMpesaTransactionResponse {
  int32 response_code = 1;
  string message = 2;
  MpesaTransactionResponseData data = 3;
}

// Mpesa transaction data to be returned by the
message MpesaTransactionResponseData {
  string transaction_id = 1;
  string amount = 2;
  string currency = 3;
  string status = 4;
  string payment_request_id = 5;
  google.protobuf.Timestamp transaction_time = 6;
}

// Request payload to match a till transaction to a given payment request ID
message MatchMpesaTransactionRequest {
  // Kyosk customer UID
  string customer_id = 1;
  // MPESA transaction code
  string transaction_id = 2;
  // Payment request ID to be matched
  string payment_request_id = 3;
  // Description of the transaction to be matched
  string narration = 4;
}

// Service logic
service MpesaRequestService {
  rpc CreatePaymentRequest(CreateMpesaRequest) returns (CreateMpesaResponse) {}
  rpc FetchCustomerPayment(FetchCustomerPaymentRequest) returns (FetchCustomerPaymentResponse) {}
  rpc InvokeSTKPush(InvokeSTKRequest) returns (InvokeSTKResponse) {}
  // Fetch an mpesa transaction given its an MPESA code
  rpc FetchMpesaTransaction(FetchMpesaTransactionRequest) returns (FetchMpesaTransactionResponse) {}
  // Match a till transaction to a given payment request
  rpc MatchMpesaTransaction(MatchMpesaTransactionRequest) returns (FetchMpesaTransactionResponse) {}
  //Process Mpesa Upload request
  rpc Import(MpesaImportRequest) returns (MpesaImportResponse);
}