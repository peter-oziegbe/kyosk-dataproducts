syntax = "proto3";
package payments.cash.v1;

import "payments/cash/v1/cash_payments.proto";
import "configurations/payment_config/v1/payment_config.proto";
import "common/shared/v1/shared.proto";
import "common/general/v1/async.proto";
import "common/query/v1/query.proto";



message InitiateCashPaymentCmd{

  // unique id used for persistence operations
  string id = 1;

  // amount being received from cust
  double amount = 2;

  // currency in which cash was received
  common.shared.v1.Currency currency = 4;

  // country of the initiator
  common.shared.v1.CountryCode country = 5;

  WalletDef customer_wallet = 6;

  // This could be the driver wallet or otherwise
  WalletDef cash_collection_wallet = 10;

  //cash collector's name for wallet creation (if does not exist)
  string collector_name = 12;

  // ref, could be DN, SI or payment request that customer is paying for
  string reference = 14;

  // narration
  string narration = 15;

  // payment request being paid for
  string payment_request_id = 18;

  common.general.v1.AsyncCmdStatus cmd_status = 22;

  common.general.v1.AsyncUserContext user_ctx = 23;

  // type of cash collection
  CashPaymentType payment_type = 24;

  // the DN being paid for
  string delivery_note_name = 26;

  // total of all unsettled collections for this collector
  double total_undeposited_collections = 27;

  // Territory ID of the incoming rcms
  string territory_id = 30;
}

message CashSettlementCmd{

  // unique id
  string id = 1;

  // cash collectors wallet - typically driver's
  string cash_wallet_id = 2;

  // amount being deposited
  double amount = 5;

  // currency of the settlement
  common.shared.v1.Currency currency = 4;

  // country of the initiator
  common.shared.v1.CountryCode country = 3;

  // bank tr reference
  string reference = 7;

  // narration as provided by Revenue Officer
  string narration = 10;

  common.general.v1.AsyncCmdStatus cmd_status = 22;

  common.general.v1.AsyncUserContext user_ctx = 23;

  // type of cash collection
  CashPaymentType payment_type = 24;

  // the DN being paid for, will be blank if `payment_type` is a driver deposit (collection in fiat)
  string delivery_note_name = 26;
}

message CashCollectionQueryResponse{
  repeated CashCollection cash_accounts = 1;
}

message CashSettlementQueryResponse{
  repeated CashSettlement cash_accounts = 1;
}

message CashCollectionLimitQueryResponse{
  repeated configurations.payment_config.v1.CashCollectionLimit limits = 1;
}

message CashCollectionLimitUpdateResponse{
  configurations.payment_config.v1.CashCollectionLimit limit = 1;
}
service CashPaymentService{
  rpc InitiateCashPayment(InitiateCashPaymentCmd) returns (InitiateCashPaymentCmd) {}
  rpc HandleCashDeposit(CashSettlementCmd) returns (CashSettlementCmd) {}
  rpc QueryCollections(common.query.v1.QueryRequest) returns(CashCollectionQueryResponse);
  rpc QuerySettlements(common.query.v1.QueryRequest) returns(CashSettlementQueryResponse);
  // to be moved to payment config svc, once it supports MongoDB
  rpc QueryCashCollectionLimit(common.query.v1.QueryRequest) returns (CashCollectionLimitQueryResponse);
  rpc UpdateCashCollectionLimit(configurations.payment_config.v1.CashCollectionLimit) returns (CashCollectionLimitUpdateResponse);
  rpc CreateCashCollectionLimit(configurations.payment_config.v1.CashCollectionLimit) returns (configurations.payment_config.v1.CashCollectionLimit);
}