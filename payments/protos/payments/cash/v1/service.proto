syntax = "proto3";
package payments.cash.v1;

import "payments/cash/v1/cash_payments.proto";
import "common/shared/v1/shared.proto";
import "common/general/v1/async.proto";
import "common/query/v1/query.proto";



message InitiateCashPaymentCmd{
  
  string id = 1;

  int32 amount = 2;

  // currency in which cash was received
  common.shared.v1.Currency currency = 4;

  // country of the initiator
  common.shared.v1.CountryCode country = 5;

  WalletDef customer_wallet =6;
  
  // This could be the driver wallet or otherwise
  WalletDef cash_collection_wallet =10;

  //cash collector's name for wallet creation (if does not exist)
  string collector_name = 12;
  
  string narration = 15;
  
  string payment_request_id = 18;

  common.general.v1.AsyncCmdStatus cmd_status= 22;

  common.general.v1.AsyncUserContext user_ctx= 23;

}

message CashSettlementCmd{
  
  string id = 1;

  // cash collectors wallet - typically driver's
  string cash_wallet_id = 2;

  int32 amount = 5;

  // currency of the settlement
  common.shared.v1.Currency currency = 4;

  // country of the initiator
  common.shared.v1.CountryCode country = 3;

  // bank tr reference
  string reference = 7;

  // narration as provided by Revenue Officer
  string narration = 10;
  
  common.general.v1.AsyncCmdStatus cmd_status= 22;

  common.general.v1.AsyncUserContext user_ctx= 23;

}

message CashQueryResponse{
  repeated CashCollectionAccount cash_accounts = 1;
}

service CashPaymentService{
  rpc InitiateCashPayment(InitiateCashPaymentCmd) returns (InitiateCashPaymentCmd) {}
  rpc HandleCashDeposit(CashSettlementCmd) returns (CashSettlementCmd) {}
  rpc Query(common.query.v1.QueryRequest) returns(CashQueryResponse);
}