syntax = "proto3";

package payments.wallet_type.v1;

// Payload to create wallet type request
message CreateWalletTypeRequest {
  string name = 1;
  UserGroup user_group = 2;
  TransactionDomain transactions_domain = 3;
  Country country = 4;
  WalletTypesOptions wallet_type_option = 5;
}

// Response of create wallet type
message CreateWalletTypeResponse {
  bool status = 1;
  int32 code = 2;
  string message = 3;
  WalletType data = 4;
}

// wallet type data payload
message WalletType {
  string name = 1;
  UserGroup user_group = 2;
  TransactionDomain transactions_domain = 3;
  Country country = 4;
  WalletTypesOptions wallet_type_option = 5;
  WalletTypeStatus wallet_type_status = 6;
  string creation_date = 7;
}

// ===== WALLET TYPES TRANSACTION DOMAIN===
enum TransactionDomain {
  SALES_ORDER = 0;
  CREDIT = 1;
  REFUND = 2;
  DEBIT = 3;
}

// ===== WALLET TYPE COUNTRY===
enum Country{
  KE = 0;
  UG = 1;
  TZ = 2;
  NG = 3;
}

// ===== CURRENCY===
enum Currency{
  KES = 0;
  UGX = 1;
  TZS = 2;
  NGN = 3;
}

// ===== WALLET TYPE USER GROUP===
enum UserGroup{
  CUSTOMER = 0;
  KYOSK = 1;
}

// ===== WALLET TYPE OPTIONS===
enum WalletTypesOptions {
  CUSTOMER_CURRENT_WALLET = 0;
  CUSTOMER_CREDIT_WALLET = 1;
  KYOSK_SALES_ORDER_WALLET = 2;
  KYOSK_CREDIT_WALLET = 3;
}

// Payload to fetch wallet types request
message FetchWalletTypesRequest{
  int32 offset = 1;
  int32 size = 2;
}

// Response of fetch wallet types
message FetchWalletTypesResponse{
  bool status = 1;
  int32 code = 2;
  string message = 3;
  repeated WalletType data = 4;
}

// ===== WALLET TYPE STATUS===
enum WalletTypeStatus {
  ACTIVE = 0;
  INACTIVE = 1;
}

message DeactivateWalletTypeRequest{
  TransactionDomain transactions_domain = 1;
  Country country = 2;
  WalletTypesOptions wallet_type_option = 3;
}

message DeactivateWalletTypeResponse{
  bool status = 1;
  int32 code = 2;
  string message = 3;
}

// === SERVICE DEFINITIONS ===
service WalletTypeService {
  rpc CreateWalletType(CreateWalletTypeRequest) returns (CreateWalletTypeResponse) {}
  rpc FetchWalletTypes(FetchWalletTypesRequest) returns (FetchWalletTypesResponse) {}
  rpc DeactivateWalletType(DeactivateWalletTypeRequest) returns (DeactivateWalletTypeResponse) {}
}