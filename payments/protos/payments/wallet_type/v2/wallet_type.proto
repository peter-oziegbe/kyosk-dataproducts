syntax = "proto3";

package payments.wallet_type.v2;

// === CREATE WALLET TYPE ===
// Payload to create wallet type request
message CreateWalletTypeRequest {
  string name = 1;
  UserGroup user_group = 2;
  TransactionDomain transactions_domain = 3;
  Countries country = 4;
  WalletTypesOptions wallet_type_option = 5;
}

// Response of create wallet type
message CreateWalletTypeResponse {
  bool status = 1;
  int32 code = 2;
  string message = 3;
  WalletTypeData data = 4;
}

// create wallet type data payload
message WalletTypeData {
  string name = 1;
  UserGroup user_group = 2;
  TransactionDomain transactions_domain = 3;
  Countries country = 4;
  WalletTypesOptions wallet_type_option = 5;
}

// ===== WALLET TYPES TRANSACTION DOMAIN===
enum TransactionDomain {
  TRANSACTION_DOMAIN_UNSPECIFIED = 0;
  SALES_ORDER = 1;
  CREDIT = 2;
  REFUND = 3;
}

// ===== WALLET TYPE COUNTRY===
enum Countries{
  COUNTRY_UNSPECIFIED = 0;
  KE = 1;
  UG = 2;
  TZ = 3;
  NG = 4;
}

// ===== WALLET TYPE USER GROUP===
enum UserGroup{
  USER_GROUP_UNSPECIFIED = 0;
  CUSTOMER = 1;
  KYOSK = 2;
}

// ===== WALLET TYPE OPTIONS===
enum WalletTypesOptions {
    WALLET_TYPES_OPTION_UNSPECIFIED = 0;
    CUSTOMER_CURRENT_WALLET = 1;
    CUSTOMER_CREDIT_WALLET = 2;
    KYOSK_SALES_ORDER_WALLET = 3;
    KYOSK_CREDIT_WALLET = 4;
}

// === SERVICE DEFINITIONS ===
service WalletTypeService {
  rpc CreateWalletType(CreateWalletTypeRequest) returns (CreateWalletTypeResponse) {}
}