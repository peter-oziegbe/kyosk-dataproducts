syntax = "proto3";

package payments.payment_request.v1;

import "google/protobuf/timestamp.proto";
import "common/shared/v1/shared.proto";

// PaymentRequestStatus represents the different statuses a payment request could be in
enum PaymentRequestStatus {
  PROCESSING = 0;
  SUCCESSFUL = 1;
  CASH_COLLECTED = 2;
  FAILED = 5;
  CANCELLED = 7;
  QUEUED = 10;
}

enum PaymentPurpose {
  DN = 0;
  CREDIT_REPAYMENT = 1;
}

enum PaymentChannel{
  MPESA_TILL = 0;
  MPESA_STK = 1;
  CASH = 2;
  CREDIT = 3;
  WALLET_BALANCE = 4;
  MTN = 5;
  MANUAL_CREDIT_REPAYMENT = 6;
  SEVI = 7;
  WEMA = 8;
  MPESA_B2C = 9;
  PEZESHA = 10;
}

enum SettlementStatus{
  INITIATED = 0;
  COMPLETED = 1;
  SETTLEMENT_CANCELLED = 2;
  SETTLEMENT_FAILED = 3;
}

//enum for indicating the type of settlement used to settle a Payment request
enum SettlementType{
  MPESA_TILL_SETTLEMENT = 0;
  MPESA_PAYBILL_SETTLEMENT = 1;
  INTERNAL_CREDIT_SETTLEMENT = 2;
  EXTERNAL_CREDIT_SETTLEMENT = 3;
  DRIVER_DEPOSIT_CASH_SETTLEMENT = 4;
  CUSTOMER_DEPOSIT_CASH_SETTLEMENT = 6;
  WALLET_BALANCE_SETTLEMENT = 5;
  MANUAL_CREDIT_REPAYMENT_SETTLEMENT = 8;
  SEVI_SETTLEMENT = 9;
  WEMA_SETTLEMENT = 10;
  MPESA_B2C_SETTLEMENT = 11;
  PEZESHA_SETTLEMENT = 12;
}

// Payload to fetch customer's payment requests
message Settlement {

  // this is the 3rd party channel
  PaymentChannel channel = 1;

  double amount = 2;

  // This is a unique code from 3rd party services e.g mpesa code
  string transaction_reference = 3;

  SettlementStatus  status = 5;

  //indicates the type of settlement used to settle a Payment request
  SettlementType settlement_type = 6;

  google.protobuf.Timestamp transaction_time = 7;

  //this will be used by payment request for settlements sent via kafka
  string payment_request_id = 9;
  //this will be used by erp for data sent via kafka
  string delivery_note_id = 10;

}

message WalletDef{
  // This is a the users ID
  string user_id = 1;

  string wallet_name = 2;
}

// PaymentRequest represents payment requests raised in the Kyosk eco-system
message PaymentRequest {
  // UUID in the kyosk eco-system
  string id = 1;

  // Delivery note that the payment is being raised for
  string payment_reference = 8;

  // Amount requested for processing
  double amount = 12;

  // Balance amount after a certain payment has been made
  double amount_settled = 18;

  // Currency of the amount requested for processing
  common.shared.v1.Currency currency = 21;

  // Current status of a given payment request
  PaymentRequestStatus status = 26;

  // Channel requested to process the given payment request. Stringfied array object containing payment details
  //[{"channel":"MPESA_STK", "amount": 500,"transaction_refernece":"QAK345V","transaction_time":8/22/2022 9:15:55},
  //{"channel":"MPESA_TILL", "amount": 500,"transaction_refernece":"QAK123K","transaction_time":8/22/2022 9:17:55}]
  repeated Settlement settlement = 30;

  // Account where revenue will be debited from to after transaction completion

  WalletDef debit_from = 35;
  WalletDef credit_to = 36;

  // Id of driver or the person allowed to receive cash for the order
  WalletDef cash_handler = 37;

  // This will determine the counter account to receive the payments monies
  PaymentPurpose purpose = 39;

  // Timestamp of when payment request was created
  google.protobuf.Timestamp created_at = 41;

  // Timestamp of when payment request was updated
  google.protobuf.Timestamp last_modified = 42;

  // country code where payment request has been made
  common.shared.v1.CountryCode country_code = 45;

  // Contains status description message of the payment request status
  string narration = 48;

  // ErpNext customer erp id
  string customer_erp_id = 50;

  //territory id
  string territory_id = 51;

  // Sales invoice being paid for
  string sales_invoice_id = 53;
}

