syntax = "proto3";

package protos.finance.payments.payment_request.v1;

import "google/protobuf/timestamp.proto";

// PaymentRequestStatus represents the different statuses a payment request could be in
enum PaymentRequestStatus {
  INITIATED_UNSPECIFIED = 0;
  PROCESSING = 1;
  SUCCESSFUL = 2;
  FAILED = 3;
}

// ChannelOptions represents the available payment channels that Kyosk offers
enum ChannelOptions {
  DEFAULT_CHANNEL_UNSPECIFIED = 0;
  MPESA = 1;
  DPO = 2;
  FLUTTERWAVE = 3;
}

// ActionTypes represents the action type that the payment request takes
enum ActionTypes {
  DEFAULT_ACTION_UNSPECIFIED = 0;
  CREDIT = 1;
  DEBIT = 2;
}

// PaymentRequest represents payment requests raised in the Kyosk eco-system
message PaymentRequest {
  // UID in the kyosk eco-system
  string id = 1;
  // UID for a kyosk
  string customer_id = 2;
  // Delivery note or sales order that payment is being raised for
  string payment_reference = 3;
  // UID for a given transaction, generated by the system that processed the payment
  string transaction_reference = 4;
  // Amount requested for processing
  int32 amount = 5;
  // Currency of the amount requested for processing
  string currency = 6;
  // Current status of a given payment request
  PaymentRequestStatus status = 7;
  // Channel requested to process the given payment request
  ChannelOptions channel = 8;
  // type of transaction that this payment request is ie DEBIT/CREDIT
  ActionTypes action_type = 9;
  // Timestamp of when payment request was created
  google.protobuf.Timestamp created_at = 10;
  // Timestamp of when payment request was last modified
  google.protobuf.Timestamp modified_at = 11;
}

// Payload to create a new payment request
message PostPaymentRequest {
  PaymentRequest payment_request = 1;
}

// Response to the CreatePaymentRequest
message PostPaymentResponse {
  int32 response_code = 1;
  string message = 2;
  PaymentRequest data = 3;
}

// Payload to fetch customer's payment requests
message GetCustomerPaymentRequest {
  string customer_id = 1;
}

// Response to the GetCustomerPaymentRequests
message GetCustomerPaymentResponse {
  int32 response_code = 1;
  string message = 2;
  repeated PaymentRequest data = 3;
}

// Service definition
service PaymentRequestService {
  rpc PostPayment(PostPaymentRequest) returns (PostPaymentResponse) {}
  rpc GetCustomerPayment(GetCustomerPaymentRequest) returns (GetCustomerPaymentResponse) {}
}


