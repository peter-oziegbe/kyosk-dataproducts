syntax = "proto3";
package credit.credit.v1;

import "credit/credit/v1/credit.proto";
import "common/query/v1/query.proto";
import "google/protobuf/empty.proto";
import "common/shared/v1/shared.proto";


//This message will be used for credit limit upload (Upload a Multipart file)
message CreditLimitImportRequest {
  bytes contents = 1;
}

//used to register for kyosk credit
message CreditLimitRequest{
  CustomerCreditLimit template = 1;
}

message CreditLimitEntityResponse{
  CustomerCreditLimit customer_credit_limit = 1;
}


message CreditLimitQueryResponse{
  repeated CustomerCreditLimit credit_limit = 1;
  //This the total amount of records based on the search criteria.
  int64 total_records = 2;
}

message UpdateCreditLimitRequest{
  string id = 1;
  double credit_limit = 3;
  CustomerLimitStatus limit_status = 5;
  string financier_id = 7;
  int32 service_fee = 9;
  int32 credit_period = 11;
  string notes = 13;
  //amount to be charged daily as late fee
  double late_fee_daily_amount = 15;
  //number of days late fee should take effect
  int32 late_fee_max_days = 17;
  // penalty fee in %
  double penalty_fee_percentage =18;
}

message CreditQueryResponse{
  repeated Credit credit = 1;
  //This the total amount of records based on the search criteria.
  int64 total_records = 2;
}

message CreditEntityResponse{
   Credit credit = 1;
}

message ActiveCreditCmd{
  string customer_id = 1;
}


// Service logic
service CreditService {

  rpc Create(CreditLimitRequest) returns (CreditLimitEntityResponse);
  rpc CreditLimitImportCsv(CreditLimitImportRequest) returns (google.protobuf.Empty);
  rpc Query(common.query.v1.QueryRequest) returns(CreditLimitQueryResponse);
  rpc UpdateCustomerCreditLimit(UpdateCreditLimitRequest) returns (CreditLimitEntityResponse);
  // Query credit records
  rpc QueryCreditRecords(common.query.v1.QueryRequest) returns(CreditQueryResponse);
  //Query active credit using customer Id
  rpc QueryActiveCredit(ActiveCreditCmd) returns(CreditEntityResponse);
  //Query active credits using customer Id(Response is for multiple credits)
  rpc QueryActiveCredits(ActiveCreditCmd) returns(CreditQueryResponse);

}