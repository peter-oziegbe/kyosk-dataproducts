#!/bin/bash


if [ -z "$PROJECT_ROOT"] 
then
       SCRIPT_PATH=$(dirname "$0") 
       cd $SCRIPT_PATH
       cd ../../
       export PROJECT_ROOT=$(pwd)
       echo $PROJECT_ROOT
fi

############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo " "
   echo "This script will clean or run command to generate source files"
   echo "for a target language."
   echo
   echo "Syntax: commands [-c|g|h]"
   echo "options:"
   echo "w    The team folder to use"
   echo "c    clear generated source directories."
   echo "g    generate java source code."
   echo "o    choise of os to run in mac or linux(default)"
   echo "h    print help menu."
   echo "v     Verbose mode.<TODO>"
   echo "V     Print software version and exit.<TODO>"
   echo
}

############################################################
############################################################
# Main program                                             #
############################################################
############################################################

function checkExecutablesAvailable(){
      
       command -v jq >/dev/null || commandMissing="jq Must be installed ,"
       command -v yq >/dev/null || commandMissing="$commandMissing yq Must be installed"  ;
       [ ! -z "$commandMissing" ] && echo $commandMissing &&  exit 1 
       
}

function getDataExclusionFiles(){

       dataFiles=`find $WORK_DIR -type f -regex '.*.proto' | grep -v _test`
       dataExclude=''
       for file in $dataFiles 
       do
              dataExclude="$dataExclude --exclude-path=$file"
       done
       [ -z "$dataExclude" ] && echo "there are no Data files"
}

function getTestExclusionFiles(){
       testFiles=`find $WORK_DIR -type f -regex '.*.proto' | grep _test`
       testExclude=''
       for file in $testFiles
       do
              testExclude="$testExclude --exclude-path=$file"
       done
       [ -z "$testExclude" ] && echo "there are no test files"
}

function generateJava(){

       getDataExclusionFiles

       getTestExclusionFiles
 
       if [ $targetOs = "mac" ]; then 
              configFile=`yq  -o=json $PROJECT_ROOT/bin/scripts/buf.gen_mac.yaml | jq -c | envsubst `
       else 
              configFile=`yq  -o=json $PROJECT_ROOT/bin/scripts/buf.gen.yaml | jq -c | envsubst`
       fi
       
       cd protos
       echo "generating java Data files $targetOs"
       [ -z "$dataExclude" ] || buf generate --template ${configFile} --include-imports ${testExclude} -o $WORK_DIR/gen/java-src/data

       echo "generating Java test files $targetOs"
       [ -z "$testExclude" ] || buf generate --template ${configFile} ${dataExclude} -o $WORK_DIR/gen/java-src/testData
}


function clearGeneratedFiles(){

rm -rf "$WORK_DIR/gen/java-src/data/src/main/java"
rm -rf "$WORK_DIR/gen/java-src/testData/src/main/java"

}

function invalid_usage(){
       Help
       exit 1
}

if [ $# -eq 0 ] 
then
  invalid_usage
fi

while getopts "w:hco:g" flag
do
       targetOs="linux"
       case "${flag}" in
              h) #print help menu
                     Help
                     exit;;
              w) ## the working directory to use
                     WORK_DIR=${OPTARG}
                     [ ! -d $WORK_DIR ] && echo "Unknown directory provided" && invalid_usage;;
              c) #clear 
                     clearFiles=true;;
              o) #Target Hardware
                     targetOs=${OPTARG};;
              g) #generate source files
                     #targetLang=${OPTARG};;
                     targetLang="java"
                     echo "setting java generation";;
              *) #Invalid Option 
                     echo "invalid usage"
                     invalid_usage;;
       esac
done

## Err if work directory has not been set
[ -z "$WORK_DIR" ] && echo "Work directory must be set" &&  invalid_usage 

WORK_DIR="$PROJECT_ROOT/$WORK_DIR"
cd $WORK_DIR
echo $WORK_DIR

[ ! -z "$clearFiles" ] && echo "Clearing files " && clearGeneratedFiles 



if [[ -z "$targetLang" ]]; 
then 
       [ ! -z "$clearFiles" ] && exit 0 
       echo "no lang provided " && invalid_usage
else
       checkExecutablesAvailable;
       case "${targetLang}" in
              java) #Generate java
                     generateJava;;
              *) # Handle unkown langs
                     echo "Unknown Language"
                     invalid_usage;;
       esac
fi



