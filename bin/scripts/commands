#!/bin/bash



############################################################
# Help                                                     #
############################################################
Help()
{
   # Display Help
   echo "This script will clean or run command to generate source files"
   echo "for a target language."
   echo
   echo "Syntax: commands [-c|g|h]"
   echo "options:"
   echo "c    clear generated source directories."
   echo "g    generate java source code."
   echo "o    choise of os to run in mac or linux(default)"
   echo "h    print help menu."
   echo "v     Verbose mode.<TODO>"
   echo "V     Print software version and exit.<TODO>"
   echo
}

############################################################
############################################################
# Main program                                             #
############################################################
############################################################

function getDataExclusionFiles(){

       dataFiles=`find . -type f -regex '.*.proto' | grep -v _test`
       dataExclude=''
       for file in $dataFiles 
       do
              dataExclude="$dataExclude --exclude-path=$file"
       done
}

function getTestExclusionFiles(){
       testFiles=`find . -type f -regex '.*.proto' | grep _test`
       testExclude=''
       for file in $testFiles
       do
              testExclude="$testExclude --exclude-path=$file"
       done
}

function generateJava(){

       getDataExclusionFiles

       getTestExclusionFiles

       echo "generating Data files"
       configFile="../bin/scripts/buf.gen.yaml"
       if [ $targetOs = "mac" ]; then 
              configFile="../bin/scripts/buf.gen_mac.yaml"
       fi
       buf generate --template ${configFile} --include-imports ${testExclude} -o gen/java-src/data

       echo "generating test files"
       buf generate --template ${configFile} ${dataExclude} -o gen/java-src/testData
}


function clearGeneratedFiles(){

rm -rf gen/java-src/data/src/main/java
rm -rf gen/java-src/testData/src/main/java

}

function invalid_usage(){
       echo "Error Invalid Option."
       Help
       exit 1
}

if [ $# -eq 0 ] 
then
  invalid_usage
fi

while getopts "hco:g" flag
do
       targetOs="linux"
       case "${flag}" in
              h) #print help menu
                     Help
                     exit;;
              c) #clear
                     echo "clearing source files" 
                     clearGeneratedFiles;;
              o) #Target Hardware
                     echo "setting os "
                     targetOs=${OPTARG};;
              g) #generate source files
                     #targetLang=${OPTARG};;
                     targetLang="java"
                     echo "setting java generation";;
              *) #Invalid Option 
                     invalid_usage;;
       esac
done

if [ -z "$targetLang" ]; 
then 
       invalid_usage
else
       case "${targetLang}" in
              java) #Generate java
                     echo "generating java files"
                     generateJava;;
              *) # Handle unkown langs
                     echo "Unknown Language"
                     invalid_usage;;
       esac
fi



