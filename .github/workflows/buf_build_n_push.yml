name: buf Build & Push
on: 
  pull_request: 
    branches: 
      - master ## target only PRs that target master... This references the base branch
    paths-ignore: 
      - 'bin/**'
      - '.github/**'
      - '.vscode/**'
  push: # For Merge into master
    branches: 
      - master
    paths-ignore: 
      - 'bin/**'
      - '.github/**'
      - '.vscode/**'
  workflow_dispatch:
    inputs:
      work_dir:
        type: choice
        description: Which project directory
        required: true
        options:
        - demo
        - ibs
        - order_fulfillment
        - payments
        - platform
        - retail_exp
        - vas

jobs: 
  demo-buf-build-pr:
    runs-on: ubuntu-latest
    if:  github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'  
    steps:
      - uses: actions/checkout@v2
      - name: Set Project Root for PR
        if: github.event_name == 'pull_request'
        run: |
          cnt=git diff master... --name-only | cut -d "/" -f1 | sort -u | wc -l
          [ $cnt -gt 1 ] && echo "Cannot modify more than 1 file " && exit 1   # make sure we only have 1 changed directory
          DIR=git diff master... --name-only | cut -d "/" -f1 | sort -u
          [ ! -f "$DIR/protos/buf.yaml" ] && echo "not a proto project dir " && exit 1
          echo "PROTO_PROJECT=$DIR/protos" >> $GITHUB_ENV
      - name: Set Project Root for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          DIR=${{ github.event.inputs.work_dir}}
          echo "PROTO_PROJECT=$DIR/protos" >> $GITHUB_ENV

      - uses: bufbuild/buf-setup-action@v1
        with:
          version: '1.8.0'
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: ${{ env.PROTO_PROJECT }}
      - uses: bufbuild/buf-breaking-action@v1
        with:
          # The 'main' branch of the GitHub repository that defines the module.
          against: 'https://github.com/${GITHUB_REPOSITORY}.git#branch=master,subdir=${{ env.PROTO_PROJECT }}'
          input: ${{ env.PROTO_PROJECT }}
      - uses: bufbuild/buf-push-action@v1
        with:
          input: ${{ env.PROTO_PROJECT }}
          buf_token: ${{ secrets.BUF_TOKEN }}
  demo-build_n_publish:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v3
      - name: check changed files
        id: set_project
        run: |
          cnt=git diff master... --name-only | cut -d "/" -f1 | sort -u | wc -l
          [ $cnt -gt 1 ] && echo "Cannot modify more than 1 file " && exit 1   # make sure we only have 1 changed directory
          DIR=git diff master... --name-only | cut -d "/" -f1 | sort -u
          [ ! -f "$DIR/protos/buf.yaml" ] && echo "not a proto project dir " && exit 1
          echo "PROTO_PROJECT=$DIR" >> $GITHUB_ENV

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        
      - name: 'Extract Artifact Version To Use'
        env: 
          PROTO_PROJECT: ${{ env.PROTO_PROJECT }}
        run: |
          version_file="gs://ky_github_actions/kyosk-dataproducts/${PROTO_PROJECT}_version"
          echo $version_file
          gsutil cp $version_file version
          version=$(<version)
          if grep -q "SNAPSHOT" <<< "$version";
          then
             echo "NEW_VERSION=$version" >> $GITHUB_ENV   
          else 
            MAJOR=$(echo $version | cut -f1 -d.)
            MINOR=$(echo $version | cut -f2 -d.)
            PATCH=$(echo $version | cut -f3 -d.)
            PATCH=$((PATCH+1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV 
          fi  
      
         
      - uses: bufbuild/buf-setup-action@v1
        with:
          version: '1.8.0'
      - uses: arduino/setup-protoc@v1
        with:
          version: '3.x'
      - name: "Generate Java Sources"
        env: 
          PROTO_PROJECT: ${{ env.PROTO_PROJECT }}
        run: |
          cd $PROTO_PROJECT
          ../bin/scripts/commands -w $PROTO_PROJECT -g
        
          
      - name: ' Set up Java '
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          
      - name: "Run Gradle Build "
        uses: gradle/gradle-build-action@v2
        env: 
          NEW_VERSION: ${{ env.NEW_VERSION }}
        with: 
          arguments: publish
          gradle-version: 7.5.1
          cache-read-only: false
          build-root-directory: demo/gen/java-src
